---
interface Props {
    titulo: string;
}

const { titulo } = Astro.props;
---

<section class="body">
    <div class="form-wrapper">
        <h2>{titulo}</h2>

        <form
            id="miFormulario"
            action="https://formsubmit.co/pqrs@safeid-sas.com"
            method="POST"
        >
            <div class="input-group">
                <input
                    type="text"
                    id="infoInput"
                    name="info"
                    placeholder="Escribe aquí tu email, teléfono o pregunta..."
                    required
                    maxlength="300"
                    pattern="^[^<>%$]*$"
                    title="Evita símbolos como < > % $"
                />
            </div>

            <div class="g-recaptcha" data-sitekey="TU_SITE_KEY_AQUI"></div>

            <button type="submit" class="submit-button">Enviar</button>
        </form>
    </div>
</section>

<script src="https://www.google.com/recaptcha/api.js" async defer></script>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        // Asegúrate de que el elemento es de tipo HTMLFormElement
        const form = document.getElementById("miFormulario") as HTMLFormElement | null;

        // VERIFICACIÓN: Si el formulario existe, entonces adjunta el event listener
        if (form) {
            form.addEventListener("submit", function (e: Event) { // Añadimos e: Event para tipar el parámetro del evento
                const captcha = grecaptcha.getResponse();

                if (!captcha) {
                    alert("Por favor completa el reCAPTCHA.");
                    e.preventDefault(); // Previene el envío del formulario
                    return; // Detiene la ejecución de la función
                }

                const lastSent = localStorage.getItem("lastSentTime");
                const now = Date.now();

                // Convertir lastSent a número para la resta, si existe
                if (lastSent && now - parseInt(lastSent) < 60000) {
                    alert("Espera un momento antes de enviar nuevamente.");
                    e.preventDefault(); // Previene el envío del formulario
                    return; // Detiene la ejecución de la función
                }

                // Si todo es válido, guarda el tiempo y permite el envío.
                // Es importante guardar `now` como un string para localStorage.
                localStorage.setItem("lastSentTime", now.toString());
            });
        } else {
            // Opcional: Si el formulario no se encuentra, puedes registrar un error en la consola.
            // Esto es útil para la depuración si el ID 'miFormulario' no es correcto o el HTML no se carga.
            console.error("Error: El formulario con ID 'miFormulario' no fue encontrado en el DOM.");
        }
    });
</script>

<style>
    /* ... Tus estilos CSS aquí (sin cambios) ... */
    :root {
        --color-primary: #002c41d6; /* Azul oscuro */
        --color-secondary: #e4a92d; /* Amarillo-naranja */
        --color-text-light: #f8f9fa;
        --color-text-dark: #343a40;
        --color-background-light: #f0f4f8;
        --color-background-dark: #212529;
    }

    .body {
        background-color: var(--color-background-light);
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 80vh;
        margin: 0;
        padding: 20px;
        box-sizing: border-box;
        background: linear-gradient(
            135deg,
            var(--color-primary) 0%,
            var(--color-background-dark) 100%
        );
    }

    .form-wrapper {
        background-color: var(--color-text-light);
        padding: 40px;
        border-radius: 12px;
        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.2);
        width: 100%;
        max-width: 600px;
        text-align: center;
        border-top: 5px solid var(--color-secondary); /* Detalle creativo */
        position: relative;
        overflow: hidden; /* Para el efecto de onda */
    }

    .form-wrapper::before {
        content: "";
        position: absolute;
        top: -50px;
        right: -50px;
        width: 150px;
        height: 150px;
        background-color: var(--color-secondary);
        border-radius: 50%;
        opacity: 0.2;
        filter: blur(30px);
        animation: pulse 4s infinite alternate;
    }
    .form-wrapper::after {
        content: "";
        position: absolute;
        bottom: -50px;
        left: -50px;
        width: 120px;
        height: 120px;
        background-color: var(--color-primary);
        border-radius: 50%;
        opacity: 0.2;
        filter: blur(25px);
        animation: pulse 4s infinite alternate reverse;
    }

    @keyframes pulse {
        0% {
            transform: scale(0.9);
            opacity: 0.2;
        }
        100% {
            transform: scale(1.1);
            opacity: 0.4;
        }
    }

    h2 {
        color: var(--color-primary);
        margin-bottom: 25px;
        font-size: 2em;
        font-weight: 700;
    }

    .input-group {
        margin-bottom: 30px;
        position: relative;
    }

    .input-group label {
        display: block;
        text-align: left;
        margin-bottom: 8px;
        color: var(--color-text-dark);
        font-weight: 700;
    }

    .input-group input[type="text"] {
        width: 100%;
        padding: 12px 15px;
        border: 2px solid var(--color-primary); /* Borde primario */
        border-radius: 8px;
        font-size: 1.1em;
        color: var(--color-text-dark);
        background-color: var(--color-background-light);
        box-sizing: border-box;
        transition:
            border-color 0.3s ease,
            box-shadow 0.3s ease;
    }

    .input-group input[type="text"]:focus {
        border-color: var(--color-secondary); /* Borde secundario al enfocar */
        outline: none;
        box-shadow: 0 0 0 4px rgba(2